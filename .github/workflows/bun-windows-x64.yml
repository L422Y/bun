# TODO(@paperdave)
# this workflow is a work in progress
name: bun-windows-x64

concurrency:
  group: bun-windows-x64-${{ github.ref }}
  cancel-in-progress: true

env:
  # note: in other files, this version is only the major version, but for windows it is the full version
  LLVM_VERSION: 16.0.6
  BUN_DOWNLOAD_URL_BASE: https://pub-5e11e972747a44bf9aaf9394f185a982.r2.dev/releases/latest

on:
  push:
    branches: [main]
    paths:
      - "src/**/*"
      - "test/**/*"
      - "packages/bun-usockets/src/**/*"
      - "build.zig"
      - "Makefile"
      - "Dockerfile"
  pull_request:
    branches: [main]
    paths:
      - "src/**/*"
      - "test/**/*"
      - "packages/bun-usockets/src/**/*"
      - "build.zig"
      - "Makefile"
      - "Dockerfile"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  windows-zig:
    name: Windows Zig Object
    runs-on: med-ubuntu
    if: github.repository_owner == 'oven-sh'
    strategy:
      matrix:
        include:
          - cpu: native
            arch: x86_64
            tag: bun-windows-x64
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # this calculation only needs to be done for the Zig code
      - name: Calculate Canary Revision
        id: canary
        run: |
          echo "canary=$(GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} bash ./scripts/calculate-canary-revision.sh)" >> $GITHUB_OUTPUT

      - name: Compile Zig Object
        uses: docker/build-push-action@v3
        if: runner.arch == 'X64'
        with:
          context: .
          push: false
          # This doesnt seem to work
          # cache-from: type=s3,endpoint_url=${{ secrets.CACHE_S3_ENDPOINT }},blobs_prefix=docker_blobs/,manifests_prefix=docker_manifests/,access_key_id=${{ secrets.CACHE_S3_ACCESS_KEY_ID }},secret_access_key=${{ secrets.CACHE_S3_SECRET_ACCESS_KEY }},bucket=bun,region=auto
          # cache-to: type=s3,endpoint_url=${{ secrets.CACHE_S3_ENDPOINT }},blobs_prefix=docker_blobs/,manifests_prefix=docker_manifests/,access_key_id=${{ secrets.CACHE_S3_ACCESS_KEY_ID }},secret_access_key=${{ secrets.CACHE_S3_SECRET_ACCESS_KEY }},bucket=bun,region=auto
          build-args: |
            BUILDARCH=${{ runner.arch == 'X64' && 'amd64' || 'arm64' }}
            BUILD_MACHINE_ARCH=${{ runner.arch == 'X64' && 'x86_64' || 'aarch64' }}
            ARCH=${{ matrix.arch }}
            CPU_TARGET=${{ matrix.cpu }}
            TRIPLET=${{ matrix.arch }}-windows-msvc
            GIT_SHA=${{ github.sha }}
            CANARY=${{ steps.canary.outputs.canary }}
          platforms: linux/${{ runner.arch == 'X64' && 'amd64' || 'arm64' }}
          target: build_release_obj
          outputs: type=local,dest=${{runner.temp}}/release

      - name: Upload Zig Object
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.tag }}-zig
          path: ${{runner.temp}}/release/bun-zig.o

  windows-dependencies:
    strategy:
      matrix:
        include:
          - runner: windows-latest
            arch: amd64
            tag: bun-windows-x64
    runs-on: windows-latest
    timeout-minutes: 90
    steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@7315a94840631165970262a99c72cfb48a65d25d
        with:
          arch: ${{ matrix.arch }}
      - uses: KyleMayes/install-llvm-action@1a3da29f56261a1e1f937ec88f0856a9b8321d7e
        with:
          version: ${{ env.LLVM_VERSION }}
      - run: choco install -y ninja
      - name: Build Dependencies
        run: |
          git submodule update --init --recursive --progress --depth=1 --checkout
          Invoke-WebRequest -Uri "https://www.nasm.us/pub/nasm/releasebuilds/2.16.01/win64/nasm-2.16.01-win64.zip" -OutFile nasm.zip
          Expand-Archive nasm.zip (mkdir -Force "nasm")
          $Nasm = (Get-ChildItem "nasm")
          $env:Path += ";${Nasm}"
          $env:BUN_DEPS_OUT_DIR = (mkdir -Force "./bun-deps")
          ./scripts/all-dependencies.ps1
      - uses: actions/upload-artifact@v3
        with:
          name: bun-deps/
          path: bun-windows-x64-deps

  windows-codegen:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          curl -fsSL $BUN_DOWNLOAD_URL_BASE/bun-linux-x64.zip > bun.zip
          unzip bun.zip
          export PATH="$PWD/bun-linux-x64:$PATH"
          ./scripts/cross-compile-codegen.sh win32 x64
      - uses: actions/upload-artifact@v3
        with:
          name: bun-windows-x64-codegen
          path: build-codegen-win32-x64/

  windows-cpp:
    strategy:
      matrix:
        include:
          - runner: windows-latest
            arch: amd64
            tag: bun-windows-x64
    runs-on: windows-latest
    timeout-minutes: 90
    steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@7315a94840631165970262a99c72cfb48a65d25d
        with:
          arch: ${{ matrix.arch }}
      - uses: KyleMayes/install-llvm-action@1a3da29f56261a1e1f937ec88f0856a9b8321d7e
        with:
          version: ${{ env.LLVM_VERSION }}
      - run: choco install -y ninja
      - name: Download Codegen
        uses: actions/download-artifact@v2
        with:
          name: bun-windows-x64-codegen
          path: build
      - name: Build C++
        run: |
          git submodule update --init --recursive --progress --depth=1 --checkout
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DNO_CODEGEN=1 -DNO_CONFIGURE_DEPENDS=1 -DCANARY=1 -DBUN_CPP_ONLY=1
          .\compile-cpp-only.ps1 -v
      - uses: actions/upload-artifact@v3
        with:
          name: buildall-cpp-objects.a
          path: bun-windows-x64-cpp

  windows-link:
    needs: [windows-dependencies, windows-codegen, windows-cpp, windows-zig]
    strategy:
      matrix:
        include:
          - runner: windows-latest
            arch: amd64
            tag: bun-windows-x64
    runs-on: windows-latest
    timeout-minutes: 90
    steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@7315a94840631165970262a99c72cfb48a65d25d
        with:
          arch: ${{ matrix.arch }}
      - uses: KyleMayes/install-llvm-action@1a3da29f56261a1e1f937ec88f0856a9b8321d7e
        with:
          version: ${{ env.LLVM_VERSION }}
      - run: choco install -y ninja
      - name: Download Codegen
        uses: actions/download-artifact@v2
        with:
          name: bun-windows-x64-codegen
          path: build
      - name: Download Dependencies
        uses: actions/download-artifact@v2
        with:
          name: bun-windows-x64-deps
          path: bun-deps
      - name: Download Zig Object
        uses: actions/download-artifact@v2
        with:
          name: bun-windows-x64-zig
          path: bun-zig
      - name: Download C++ Objects
        uses: actions/download-artifact@v2
        with:
          name: bun-windows-x64-cpp
          path: bun-cpp
      - name: Link
        run: |
          git submodule update --init --recursive --progress --depth=1 --checkout
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release `
            -DNO_CODEGEN=1 `
            -DNO_CONFIGURE_DEPENDS=1 `
            -DCANARY=1 `
            -DBUN_LINK_ONLY=1 `
            '-DBUN_DEPS_OUT_DIR=../bun-deps' `
            '-DBUN_CPP_ARCHIVE=../bun-cpp/buildall-cpp-objects.a' `
            '-DBUN_ZIG_OBJ=../bun-zig/bun-zig.o'
          ninja -v
      # TODO: code sign?
      - name: Package
        run: |
          mkdir -Force "bun-windows-x64"
          cp -r build/bun.exe bun-windows-x64/bun.exe
          Compress-Archive bun-windows-x64 bun-windows-x64.zip
      - uses: actions/upload-artifact@v3
        with:
          name: bun-windows-x64
          path: build/bun-windows-x64.zip
